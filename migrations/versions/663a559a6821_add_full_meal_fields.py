"""Add full Meal fields

Revision ID: 663a559a6821
Revises: 8dbf939cb6ab
Create Date: 2025-10-16 15:55:59.322076

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '663a559a6821'
down_revision: Union[str, Sequence[str], None] = '8dbf939cb6ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('meal_slot_meals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_slot_id', sa.Integer(), nullable=False),
    sa.Column('meal_id', sa.Integer(), nullable=False),
    sa.Column('portions', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['meal_id'], ['meals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['meal_slot_id'], ['meal_slots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('ix_meal_slot_recipes_recipe'), table_name='meal_slot_recipes')
    op.drop_index(op.f('ix_meal_slot_recipes_slot'), table_name='meal_slot_recipes')
    op.drop_table('meal_slot_recipes')
    op.drop_index(op.f('ix_diet_tags_code'), table_name='diet_tags')
    op.drop_index(op.f('uq_families_invite_code'), table_name='families')
    op.drop_index(op.f('ix_memberships_family_id'), table_name='family_memberships')
    op.drop_index(op.f('ix_memberships_family_role'), table_name='family_memberships')
    op.drop_index(op.f('ix_memberships_user_id'), table_name='family_memberships')
    op.drop_constraint(op.f('uq_memberships_family_user'), 'family_memberships', type_='unique')
    op.drop_index(op.f('ix_gl_items_ingredient'), table_name='grocery_list_items')
    op.drop_index(op.f('ix_gl_items_list'), table_name='grocery_list_items')
    op.drop_index(op.f('ix_gl_items_list_checked'), table_name='grocery_list_items')
    op.drop_index(op.f('ix_grocery_lists_family'), table_name='grocery_lists')
    op.drop_index(op.f('ix_grocery_lists_family_created'), table_name='grocery_lists')
    op.drop_index(op.f('ix_grocery_lists_status'), table_name='grocery_lists')
    op.drop_index(op.f('ix_ingredients_created_at'), table_name='ingredients')
    op.drop_index(op.f('ix_ingredients_name_trgm'), table_name='ingredients', postgresql_ops={'name': 'gin_trgm_ops'}, postgresql_using='gin')
    op.alter_column('meal_plans', 'family_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_meal_plans_family'), table_name='meal_plans')
    op.drop_index(op.f('ix_meal_plans_family_created'), table_name='meal_plans')
    op.drop_index(op.f('ix_meal_slots_plan'), table_name='meal_slots')
    op.drop_constraint(op.f('uq_meal_slots_plan_day_slot'), 'meal_slots', type_='unique')
    op.add_column('meals', sa.Column('meal_type', sa.Enum('Breakfast', 'Lunch', 'Dinner', 'Snack', 'Dessert', name='mealtype'), nullable=False))
    op.add_column('meals', sa.Column('difficulty', sa.Enum('Easy', 'Medium', 'Hard', name='mealdifficulty'), nullable=True))
    op.alter_column('meals', 'image',
               existing_type=sa.VARCHAR(length=16),
               type_=sa.String(length=32),
               nullable=True)
    op.alter_column('meals', 'prep_time',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('meals', 'cook_time',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('meals', 'total_time',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('meals', 'cuisine',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
    op.alter_column('meals', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'macros',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'servings',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('meals', 'diet_compatibility',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'goal_fit',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'ingredients',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('meals', 'instructions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('meals', 'cooking_tools',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'notes',
               existing_type=sa.TEXT(),
               server_default=None,
               nullable=True)
    op.alter_column('meals', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('pantry_items', 'ingredient_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_pantry_family'), table_name='pantry_items')
    op.drop_index(op.f('ix_pantry_family_ingredient'), table_name='pantry_items')
    op.create_index(op.f('ix_pantry_items_category'), 'pantry_items', ['category'], unique=False)
    op.drop_index(op.f('ix_recipe_ingredients_ingredient'), table_name='recipe_ingredients')
    op.drop_index(op.f('ix_recipe_ingredients_recipe'), table_name='recipe_ingredients')
    op.drop_index(op.f('ix_recipes_created_at'), table_name='recipes')
    op.drop_index(op.f('ix_recipes_family'), table_name='recipes')
    op.drop_index(op.f('ix_recipes_title_trgm'), table_name='recipes', postgresql_ops={'title': 'gin_trgm_ops'}, postgresql_using='gin')
    op.drop_index(op.f('ix_units_code'), table_name='units')
    op.alter_column('user_preferences', 'diet_codes',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default='{}',
               nullable=False)
    op.alter_column('user_preferences', 'allergen_ingredient_ids',
               existing_type=postgresql.ARRAY(sa.INTEGER()),
               server_default='{}',
               nullable=False)
    op.alter_column('user_preferences', 'disliked_ingredient_ids',
               existing_type=postgresql.ARRAY(sa.INTEGER()),
               server_default='{}',
               nullable=False)
    op.alter_column('user_preferences', 'goal',
               existing_type=sa.TEXT(),
               server_default=sa.text("'balanced'"),
               nullable=False)
    op.alter_column('user_preferences', 'calorie_target',
               existing_type=sa.INTEGER(),
               server_default=sa.text('2000'),
               nullable=False)
    op.drop_index(op.f('ix_user_preferences_user'), table_name='user_preferences')
    op.drop_constraint(op.f('user_preferences_user_id_key'), 'user_preferences', type_='unique')
    op.create_index(op.f('ix_user_preferences_user_id'), 'user_preferences', ['user_id'], unique=True)
    op.alter_column('users', 'location',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('users', 'avatar_path',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'password_reset_attempts',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('uq_users_email'), table_name='users')
    op.create_index(op.f('ix_users_password_reset_code'), 'users', ['password_reset_code'], unique=False)
    op.create_index(op.f('ix_users_verification_code'), 'users', ['verification_code'], unique=False)
    op.drop_column('users', 'updated_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_verification_code'), table_name='users')
    op.drop_index(op.f('ix_users_password_reset_code'), table_name='users')
    op.create_index(op.f('uq_users_email'), 'users', ['email'], unique=True)
    op.alter_column('users', 'password_reset_attempts',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('users', 'avatar_path',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'location',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_index(op.f('ix_user_preferences_user_id'), table_name='user_preferences')
    op.create_unique_constraint(op.f('user_preferences_user_id_key'), 'user_preferences', ['user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_user_preferences_user'), 'user_preferences', ['user_id'], unique=False)
    op.alter_column('user_preferences', 'calorie_target',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.alter_column('user_preferences', 'goal',
               existing_type=sa.TEXT(),
               server_default=None,
               nullable=True)
    op.alter_column('user_preferences', 'disliked_ingredient_ids',
               existing_type=postgresql.ARRAY(sa.INTEGER()),
               server_default=None,
               nullable=True)
    op.alter_column('user_preferences', 'allergen_ingredient_ids',
               existing_type=postgresql.ARRAY(sa.INTEGER()),
               server_default=None,
               nullable=True)
    op.alter_column('user_preferences', 'diet_codes',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               server_default=None,
               nullable=True)
    op.create_index(op.f('ix_units_code'), 'units', ['code'], unique=False)
    op.create_index(op.f('ix_recipes_title_trgm'), 'recipes', ['title'], unique=False, postgresql_ops={'title': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('ix_recipes_family'), 'recipes', ['family_id'], unique=False)
    op.create_index(op.f('ix_recipes_created_at'), 'recipes', ['created_at'], unique=False)
    op.create_index(op.f('ix_recipe_ingredients_recipe'), 'recipe_ingredients', ['recipe_id'], unique=False)
    op.create_index(op.f('ix_recipe_ingredients_ingredient'), 'recipe_ingredients', ['ingredient_id'], unique=False)
    op.drop_index(op.f('ix_pantry_items_category'), table_name='pantry_items')
    op.create_index(op.f('ix_pantry_family_ingredient'), 'pantry_items', ['family_id', 'ingredient_id'], unique=False)
    op.create_index(op.f('ix_pantry_family'), 'pantry_items', ['family_id'], unique=False)
    op.alter_column('pantry_items', 'ingredient_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('meals', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('meals', 'notes',
               existing_type=sa.TEXT(),
               server_default=sa.text("''::text"),
               nullable=False)
    op.alter_column('meals', 'cooking_tools',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               nullable=False)
    op.alter_column('meals', 'instructions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=False)
    op.alter_column('meals', 'ingredients',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=False)
    op.alter_column('meals', 'goal_fit',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               nullable=False)
    op.alter_column('meals', 'diet_compatibility',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               nullable=False)
    op.alter_column('meals', 'servings',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('meals', 'macros',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text('\'{"fats": 0, "carbs": 0, "protein": 0}\'::jsonb'),
               nullable=False)
    op.alter_column('meals', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               nullable=False)
    op.alter_column('meals', 'cuisine',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
    op.alter_column('meals', 'total_time',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('meals', 'cook_time',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('meals', 'prep_time',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('meals', 'image',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=16),
               nullable=False)
    op.drop_column('meals', 'difficulty')
    op.drop_column('meals', 'meal_type')
    op.create_unique_constraint(op.f('uq_meal_slots_plan_day_slot'), 'meal_slots', ['meal_plan_id', 'day', 'slot'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_meal_slots_plan'), 'meal_slots', ['meal_plan_id'], unique=False)
    op.create_index(op.f('ix_meal_plans_family_created'), 'meal_plans', ['family_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_meal_plans_family'), 'meal_plans', ['family_id'], unique=False)
    op.alter_column('meal_plans', 'family_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_ingredients_name_trgm'), 'ingredients', ['name'], unique=False, postgresql_ops={'name': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('ix_ingredients_created_at'), 'ingredients', ['created_at'], unique=False)
    op.create_index(op.f('ix_grocery_lists_status'), 'grocery_lists', ['status'], unique=False)
    op.create_index(op.f('ix_grocery_lists_family_created'), 'grocery_lists', ['family_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_grocery_lists_family'), 'grocery_lists', ['family_id'], unique=False)
    op.create_index(op.f('ix_gl_items_list_checked'), 'grocery_list_items', ['grocery_list_id', 'checked'], unique=False)
    op.create_index(op.f('ix_gl_items_list'), 'grocery_list_items', ['grocery_list_id'], unique=False)
    op.create_index(op.f('ix_gl_items_ingredient'), 'grocery_list_items', ['ingredient_id'], unique=False)
    op.create_unique_constraint(op.f('uq_memberships_family_user'), 'family_memberships', ['family_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_memberships_user_id'), 'family_memberships', ['user_id'], unique=False)
    op.create_index(op.f('ix_memberships_family_role'), 'family_memberships', ['family_id', 'role'], unique=False)
    op.create_index(op.f('ix_memberships_family_id'), 'family_memberships', ['family_id'], unique=False)
    op.create_index(op.f('uq_families_invite_code'), 'families', ['invite_code'], unique=True)
    op.create_index(op.f('ix_diet_tags_code'), 'diet_tags', ['code'], unique=False)
    op.create_table('meal_slot_recipes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('meal_slot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('portions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['meal_slot_id'], ['meal_slots.id'], name=op.f('meal_slot_recipes_meal_slot_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], name=op.f('meal_slot_recipes_recipe_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('meal_slot_recipes_pkey')),
    sa.UniqueConstraint('meal_slot_id', 'recipe_id', name=op.f('uq_slot_recipe'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_meal_slot_recipes_slot'), 'meal_slot_recipes', ['meal_slot_id'], unique=False)
    op.create_index(op.f('ix_meal_slot_recipes_recipe'), 'meal_slot_recipes', ['recipe_id'], unique=False)
    op.drop_table('meal_slot_meals')
    # ### end Alembic commands ###
